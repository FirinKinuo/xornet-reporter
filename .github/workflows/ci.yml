name: Check on Push

on: [push, workflow_dispatch]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Compilations
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        target: 
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - arm-unknown-linux-gnueabi
          - arm-unknown-linux-gnueabihf
          - arm-unknown-linux-musleabi
          - arm-unknown-linux-musleabihf
          - armv7-unknown-linux-gnueabihf
          - armv7-unknown-linux-musleabihf
          - i586-unknown-linux-gnu
          - i586-unknown-linux-musl
          - i686-unknown-linux-gnu
          - i686-unknown-linux-musl
          - mips-unknown-linux-gnu
          - mips-unknown-linux-musl
          - mips64-unknown-linux-gnuabi64
          - mips64el-unknown-linux-gnuabi64
          - mipsel-unknown-linux-gnu
          - mipsel-unknown-linux-musl
          - powerpc-unknown-linux-gnu
          - powerpc64le-unknown-linux-gnu
          - riscv64gc-unknown-linux-gnu
          - s390x-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
    name: "ðŸ›  Compile for Linux"
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ›Ž Checkout
        uses: actions/checkout@v2
      - name: ðŸ›Ž Install cross
        run: cargo install cross
      - name: ðŸ›Ž Build ${{matrix.target}}
        run: cross build --target ${{matrix.target}} --verbose --release
      - name: ðŸ’Ž Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: xornet-reporter_compiled_${{matrix.target}}
          path: target/${{matrix.target}}/release/xornet-reporter
  build-windows:
    name: "ðŸ›  Compile for Windows (x86_64)"
    runs-on: windows-latest
    steps:
    - name: ðŸ›Ž Checkout
      uses: actions/checkout@v2
    - name: ðŸ›  Build
      run: cargo build --release
    # - name: ðŸ§ª Run tests
    #   run: cargo test --release
    - name: ðŸ’Ž Upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: xornet-reporter_compiled_windows
        path: target/release/xornet-reporter.exe
  build-macos:
    name: "ðŸ›  Compile for MacOS (x86_64)"
    runs-on: macos-latest
    steps:
    - name: ðŸ›Ž Checkout
      uses: actions/checkout@v2
    - name: ðŸ›  Build
      run: cargo build --release
    # - name: ðŸ§ª Run tests
    #   run: cargo test --release
    - name: ðŸ’Ž Upload artifact
      uses: actions/upload-artifact@v1
      with:
        name: xornet-reporter_compiled_macos
        path: target/release/xornet-reporter

  # Testing if runs
  test-linux: 
    name: "ðŸ§ª Test Linux (x86_64)"
    runs-on: ubuntu-latest
    needs: build-linux
    steps:
      - name: ðŸ’Ž Download linux Binary
        uses: actions/download-artifact@v2
        with:
          name: xornet-reporter_compiled_x86_64-unknown-linux-gnu
          path: linux_build
      - name: "ðŸ›  Chmod"
        run: chmod +x ./linux_build/xornet-reporter
      - name: "ðŸ§ª Test --help argument"
        run: sudo ./linux_build/xornet-reporter --help
      - name: "ðŸ§ª Test --offline argument"
        run: >
          node -e "const { spawn } = require('child_process'); const reporter = spawn('./linux_build/xornet-reporter', ['--offline']); reporter.stdout.on('data', (data) => console.log(data.toString())); reporter.stderr.on('data', (data) => console.log(data.toString())); setTimeout(() => reporter.kill(), 5000);"
  test-windows: 
    name: "ðŸ§ª Test Windows (x86_64)"
    runs-on: windows-latest
    needs: build-windows
    steps:
      - name: ðŸ’Ž Download Windows Binary
        uses: actions/download-artifact@v2
        with:
          name: xornet-reporter_compiled_windows
          path: windows_build
      - name: "ðŸ§ª Test --help argument"
        run: ./windows_build/xornet-reporter.exe --help
      - name: "ðŸ§ª Test --offline argument"
        run: >
          node -e "const { spawn } = require('child_process'); const reporter = spawn('./windows_build/xornet-reporter.exe', ['--offline']); reporter.stdout.on('data', (data) => console.log(data.toString())); reporter.stderr.on('data', (data) => console.log(data.toString())); setTimeout(() => reporter.kill(), 5000);"
  test-macos: 
    name: "ðŸ§ª Test MacOS (x86_64)"
    runs-on: macos-latest
    needs: build-macos
    steps:
      - name: ðŸ’Ž Download MacOS Binary
        uses: actions/download-artifact@v2
        with:
          name: xornet-reporter_compiled_macos
          path: macos_build
      - name: "ðŸ›  Chmod"
        run: chmod +x ./macos_build/xornet-reporter
      - name: "ðŸ§ª Test --help argument"
        run: sudo ./macos_build/xornet-reporter --help
      - name: "ðŸ§ª Test --offline argument"
        run: >
          node -e "const { spawn } = require('child_process'); const reporter = spawn('./macos_build/xornet-reporter', ['--offline']); reporter.stdout.on('data', (data) => console.log(data.toString())); reporter.stderr.on('data', (data) => console.log(data.toString())); setTimeout(() => reporter.kill(), 5000);"

  # Create release
  create-release:
    name: "ðŸ“¦ Create Release"
    runs-on: ubuntu-latest
    needs: [test-linux, test-macos, test-windows]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      
      # Yes we get the repo again but only for the version in the package.json
      - name: ðŸ›Ž Checkout
        uses: actions/checkout@v2

      - name: âš¡ Set Version Variable
        id: version
        run: >
          echo "::set-output name=value::$(cargo pkgid | cut -d# -f2 | cut -d: -f2)"
     
      # The release script that prepares a new Github release
      - name: âš¡ Create Release
        if: ${{needs.latest-tag.outputs.tag != steps.version.outputs.value}}
        uses: actions/create-release@v1
        id: create_release
        continue-on-error: true
        with:
          draft: false
          prerelease: false
          release_name: Xornet Reporter v${{ steps.version.outputs.value }}
          tag_name: v${{ steps.version.outputs.value }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
  upload: 
    name: "ðŸ“¤ Upload Builds"
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix: 
       targetPlatform:
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - arm-unknown-linux-gnueabi
          - arm-unknown-linux-gnueabihf
          - arm-unknown-linux-musleabi
          - arm-unknown-linux-musleabihf
          - armv7-unknown-linux-gnueabihf
          - armv7-unknown-linux-musleabihf
          - i586-unknown-linux-gnu
          - i586-unknown-linux-musl
          - i686-unknown-linux-gnu
          - i686-unknown-linux-musl
          - mips-unknown-linux-gnu
          - mips-unknown-linux-musl
          - mips64-unknown-linux-gnuabi64
          - mips64el-unknown-linux-gnuabi64
          - mipsel-unknown-linux-gnu
          - mipsel-unknown-linux-musl
          - powerpc-unknown-linux-gnu
          - powerpc64le-unknown-linux-gnu
          - riscv64gc-unknown-linux-gnu
          - s390x-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - windows
          - macos
      fail-fast: false
    steps:

      # Download the artifacts
      - name: ðŸ’Ž Download ${{matrix.targetPlatform}} Binaries
        uses: actions/download-artifact@v2
        with:
          name: xornet-reporter_compiled_${{matrix.targetPlatform}}
          path: ${{matrix.targetPlatform}}_build

      # Upload Release
      - name: ðŸ’Ž Upload ${{matrix.targetPlatform}} Artifact
        continue-on-error: true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{matrix.targetPlatform}}_build/${{ matrix.targetPlatform == 'windows' && 'xornet-reporter.exe' || 'xornet-reporter' }}
          asset_name: xornet-reporter.${{matrix.targetPlatform}}
          asset_content_type: application/octet-stream